/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    cellMotionU
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1e-7;
        relTol          0;
        minIter 1;
    }
/*
    p
    {
        solver          GAMG;
        tolerance       1e-11;
        relTol          0.01;
        smoother        GaussSeidel;
        cacheAgglomeration true;
        nCellsInCoarsestLevel 25; //10;
        agglomerator    faceAreaPair;
        mergeLevels     1;
    }
*/
    p
    {
        solver          PCG;
        preconditioner  DIC; //SymGaussSeidel;
/*
        preconditioner      
        {                   
            preconditioner  GAMG;
            nVcycles        4;
            tolerance       1e-05;
            relTol          0;       
            smoother        DICGaussSeidel;      
            //number of smoothing steps before projection
            nSmoothingSteps 3;                           
            //sweeps to perform before moving to a coarser level. 
            nPreSweeps      1;                                    
            //sweeps to perform after coarser level corrections   
            nPostSweeps     2;                                    
            nFinestSweeps   2;                                  
            cacheAgglomeration true;                              
            nCellsInCoarsestLevel 100;
            agglomerator    faceAreaPair; 
            //-HM alternatives: algebraicPair; faceAreaPair;                         
            mergeLevels     1;                                    
        }
*/
        tolerance        1e-09;
        relTol           1e-06;   
        minIter          3;   
        maxIter          100;  
    }
/*
    pFinal
    {
        solver          GAMG;
        tolerance       1e-12;
        relTol          0;
        smoother        GaussSeidel;
        cacheAgglomeration true;
        nCellsInCoarsestLevel 500; //10;
        agglomerator    faceAreaPair;
        mergeLevels     1;
    }
*/
    pFinal
    {
        solver          PCG;
        preconditioner  DIC; //SymGaussSeidel;
/*
        preconditioner      
        {                   
            preconditioner  GAMG;
            nVcycles        5;
            tolerance       1e-07;
            relTol          0;       
            smoother        DICGaussSeidel;      
            //number of smoothing steps before projection
            nSmoothingSteps 4;                           
            //sweeps to perform before moving to a coarser level. 
            nPreSweeps      1;                                    
            //sweeps to perform after coarser level corrections   
            nPostSweeps     2;                                    
            nFinestSweeps   2;                                  
            cacheAgglomeration true;                              
            nCellsInCoarsestLevel 10000;
            agglomerator    faceAreaPair; 
            //-HM alternatives: algebraicPair; faceAreaPair;                         
            mergeLevels     1;                                    
        }
*/
        tolerance        1e-12;
        relTol           0;   
        minIter          5;   
        maxIter          100;  
    }

    U
    {
        solver          PBiCG;
        preconditioner  DILU;
        tolerance       1e-10;
        relTol          0;
    }
    
    C
    {
        solver          PBiCG;
        preconditioner  DILU;
        minIter         2;
        maxIter         2000;
        tolerance       1e-16;
        relTol          0;
    }
}

//PIMPLE
PISO
{
    nOuterCorrectors            2; //6
    nCorrectors                 3; //3
    nNonOrthogonalCorrectors    1;
    nCsurfSubCycles             3;

    pRefPoint (0 0 0);
    pRefValue 0;
}

relaxationFactors
{
    U      1;
    p      0.3;
}



// ************************************************************************* //
